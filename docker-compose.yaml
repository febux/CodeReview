version: '3.8'

x-common-config: &common-config
  APPLICATION_ENV__LOCAL: 'local'
  DEBUG: 'True'
  SECRET_KEY: ${SECRET_KEY_DJANGO}
  DJANGO_ALLOWED_HOSTS: "localhost 127.0.0.1 [::1] 0.0.0.0"
  EMAIL_HOST_USER: ${EMAIL_HOST_USER}
  EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
  DEFAULT_FROM_EMAIL: ${EMAIL_HOST_USER}

x-redis-config: &redis-config
  REDIS_USER: ${REDIS_USER}
  REDIS_HOST: "code_review__redis"
  REDIS_PORT: ${REDIS_PORT}
  REDIS_PASSWORD: ${REDIS_PASSWORD}

x-db-config: &db-config
  POSTGRES_HOST: "code_review__db"
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_PORT: ${POSTGRES_PORT}
  POSTGRES_DB: ${POSTGRES_DB}

services:
  code_review__web:
    build:
      context: "."
      dockerfile: "srv/code-review--web/Dockerfile"
    command: "python manage.py runserver ${DJANGO_HOST}:${DJANGO_PORT}"
    restart: 'no'
    networks:
      - postgres
      - redis
    volumes:
      - ./src:/docker_app/src
    ports:
      - "${DJANGO_PORT}:${DJANGO_PORT}"
    environment:
      <<: *common-config
      <<: *db-config
    depends_on:
      - code_review__redis
      - code_review__db
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  code_review__db:
    image: postgres:14-alpine
    restart: always
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    networks:
      - postgres
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - data:/var/lib/postgresql/data
    environment:
      <<: *db-config
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
        resources:
          limits:
            cpus: '1'
            memory: 4G

  code_review__db_exporter:
    image: prometheuscommunity/postgres-exporter:v0.10.1
    environment:
      DATA_SOURCE_URI: "code_review__db:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
      DATA_SOURCE_USER: ${POSTGRES_USER}
      DATA_SOURCE_PASS: ${POSTGRES_PASSWORD}
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "9187:9187"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 500M
    networks:
      - postgres
    depends_on:
      - code_review__db

  code_review__manager_db:
    build:
      context: "."
      dockerfile: "srv/code-review--db/Dockerfile"
    command: "echo 'do nothing'"
    restart: 'no'
    networks:
      - postgres
    volumes:
      - ./src:/docker_app/src
    environment:
      <<: *common-config
      <<: *db-config
    depends_on:
      - code_review__db

  code_review__redis:
    image: redis:6.2-alpine
    restart: always
    networks:
      - redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - cache:/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  code_review__celery:
    build:
      context: "."
      dockerfile: "srv/code-review--web/Dockerfile"
    command: "celery -A code_review_project worker -l info"
    networks:
      - postgres
      - redis
    volumes:
      - ./src:/docker_app/src
    environment:
      <<: *common-config
      <<: *db-config
      <<: *redis-config
    depends_on:
      - code_review__redis
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  code_review__celery_beat:
    build:
      context: "."
      dockerfile: "srv/code-review--web/Dockerfile"
    command: "celery -A code_review_project beat -l info"
    networks:
      - postgres
      - redis
    volumes:
      - ./src:/docker_app/src
    environment:
      <<: *common-config
      <<: *db-config
      <<: *redis-config
    depends_on:
      - code_review__redis
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G


volumes:
  cache:
    driver: local
  data:

networks:
  postgres:
    driver: bridge
  redis:
    driver: bridge